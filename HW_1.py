# Сформировать список из N членов последовательности. Для N = 5: 1, -3, 9, -27, 81 и т.д.
# N = int(input('Введите число: '))

# def list_degree(N):
#     return[((-3)**i) for i in range(N)]
    
# print(list_degree(N))  

# *******************************************************************************************************

# Для натурального n создать словарь индекс-значение, состоящий из элементов последовательности 3n + 1. 
# Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}

# n = int(input('Введите число: '))

# def some_numbers(n):
#     return{i: (3*i+1) for i in range(1, n+1)}

# print(some_numbers(n))

# **********************************************************************************************************

# Пользователь задаёт две строки. Определить количество вхождений одной строки в другой.(ПЕРЕРАБОТАТЬ!!!!!)

# val1 = str(input('Введите данные: '))
# val2 = str(input('Введите данные: '))
# count = 0
# def entry_count(val1, val2):
#     for i in range(len(val1) + len(val2) + 1):
#         if val2[i+len(val1)+1] == val1:
#             count += 1
# print(count)   
# 
# **********************************************************************************************************
 
#  Подсчитать сумму цифр в вещественном числе

# n = float(input('Введите вещественное число '))

# def digit_sum(n):
#     return sum(map(int, list(str(n).replace('.',''))))

# print('Сумма цифр равна: ', digit_sum(n))  

# **********************************************************************************************************

# Написать программу получающую набор произведений чисел от 1 до N. Пример: пусть N = 4, тогда [ 1, 2, 6, 24 ]

n = int(input('Введите число: '))

def Products_of_numbers(n):
    num1 = 1
    nums = []
    for i in range(1, n + 1):
        num1 *= i
        nums.append(num1)
    return nums
print(Products_of_numbers(n))        

